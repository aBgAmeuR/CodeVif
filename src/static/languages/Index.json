[
  {
    "id": 1,
    "text": "exports.DeleteUser = async (req, res, next) => {\n\ttry {\n\t\tconst username = req.user.username;\n\t\tif (!username) {\n\t\t\treturn next({ status: 400, message: 'Missing input'});\n\t\t}\n\t\ttry {\n\t\t\tconst user = await User.DeleteUser(username);\n\t\t\tres.status(200).send({ error: false, message: 'User deleted' });\n\t\t} catch (error) {\n\t\t\treturn next({ status: 404, message: 'User not found' });\n\t\t}\n\t} catch (error) {\n\t\tnext({ status: 500, message: 'Internal Server Error' });\n\t}\n}",
    "language": "JavaScript"
  },
  {
    "id": 2,
    "text": "exports.GetUser = async (req, res, next) => {\n\ttry {\n\t\tconst username = req.user.username;\n\t\tif (!username) {\n\t\t\treturn next({ status: 400, message: 'Missing input'});\n\t\t}\n\t\ttry {\n\t\t\tconst user = await User.GetUser(username);\n\t\t\tres.status(200).send({ error: false, message: 'User found', user });\n\t\t} catch (error) {\n\t\t\treturn next({ status: 404, message: 'User not found' });\n\t\t}\n\t} catch (error) {\n\t\tnext({ status: 500, message: 'Internal Server Error' });\n\t}\n}",
    "language": "JavaScript"
  },
  {
    "id": 3,
    "text": "exports.UpdateUser = async (req, res, next) => {\n\ttry {\n\t\tconst username = req.user.username;\n\t\tconst { password, email } = req.body;\n\t\tif (!username || !password || !email) {\n\t\t\treturn next({ status: 400, message: 'Missing input'});\n\t\t}\n\t\ttry {\n\t\t\tconst user = await User.UpdateUser(username, password, email);\n\t\t\tres.status(200).send({ error: false, message: 'User updated', user });\n\t\t} catch (error) {\n\t\t\treturn next({ status: 404, message: 'User not found' });\n\t\t}\n\t} catch (error) {\n\t\tnext({ status: 500, message: 'Internal Server Error' });\n\t}\n}",
    "language": "JavaScript"
  },
  {
    "id": 4,
    "text": "exports.CreateUser = async (req, res, next) => {\n\ttry {\n\t\tconst { username, password, email } = req.body;\n\t\tif (!username || !password || !email) {\n\t\t\treturn next({ status: 400, message: 'Missing input'});\n\t\t}\n\t\ttry {\n\t\t\tconst user = await User.CreateUser(username, password, email);\n\t\t\tres.status",
    "language": "JavaScript"
  },
  {
    "id": 5,
    "text": "Room room = mappedRoom(node);\nfor (Map.Entry<Direction, Room> entry : lastRoom.getNextRooms().entrySet()) {\n\tif (entry.getValue().equals(room)) {\n\t\tsoluce.addDirection(entry.getKey());\n\t\tbreak;\n\t}\n}",
    "language": "Java"
  }
]